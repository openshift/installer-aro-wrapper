// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/openshift/installer-aro-wrapper/pkg/util/azureclient/keyvault (interfaces: BaseClient)
//
// Generated by this command:
//
//	mockgen -destination=../../../util/mocks/azureclient/keyvault/keyvault.go github.com/openshift/installer-aro-wrapper/pkg/util/azureclient/keyvault BaseClient
//

// Package mock_keyvault is a generated GoMock package.
package mock_keyvault

import (
	context "context"
	reflect "reflect"

	keyvault "github.com/Azure/azure-sdk-for-go/services/keyvault/v7.0/keyvault"
	gomock "go.uber.org/mock/gomock"
)

// MockBaseClient is a mock of BaseClient interface.
type MockBaseClient struct {
	ctrl     *gomock.Controller
	recorder *MockBaseClientMockRecorder
	isgomock struct{}
}

// MockBaseClientMockRecorder is the mock recorder for MockBaseClient.
type MockBaseClientMockRecorder struct {
	mock *MockBaseClient
}

// NewMockBaseClient creates a new mock instance.
func NewMockBaseClient(ctrl *gomock.Controller) *MockBaseClient {
	mock := &MockBaseClient{ctrl: ctrl}
	mock.recorder = &MockBaseClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBaseClient) EXPECT() *MockBaseClientMockRecorder {
	return m.recorder
}

// CreateCertificate mocks base method.
func (m *MockBaseClient) CreateCertificate(ctx context.Context, vaultBaseURL, certificateName string, parameters keyvault.CertificateCreateParameters) (keyvault.CertificateOperation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCertificate", ctx, vaultBaseURL, certificateName, parameters)
	ret0, _ := ret[0].(keyvault.CertificateOperation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCertificate indicates an expected call of CreateCertificate.
func (mr *MockBaseClientMockRecorder) CreateCertificate(ctx, vaultBaseURL, certificateName, parameters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCertificate", reflect.TypeOf((*MockBaseClient)(nil).CreateCertificate), ctx, vaultBaseURL, certificateName, parameters)
}

// DeleteCertificate mocks base method.
func (m *MockBaseClient) DeleteCertificate(ctx context.Context, vaultBaseURL, certificateName string) (keyvault.DeletedCertificateBundle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCertificate", ctx, vaultBaseURL, certificateName)
	ret0, _ := ret[0].(keyvault.DeletedCertificateBundle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCertificate indicates an expected call of DeleteCertificate.
func (mr *MockBaseClientMockRecorder) DeleteCertificate(ctx, vaultBaseURL, certificateName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCertificate", reflect.TypeOf((*MockBaseClient)(nil).DeleteCertificate), ctx, vaultBaseURL, certificateName)
}

// GetCertificateOperation mocks base method.
func (m *MockBaseClient) GetCertificateOperation(ctx context.Context, vaultBaseURL, certificateName string) (keyvault.CertificateOperation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCertificateOperation", ctx, vaultBaseURL, certificateName)
	ret0, _ := ret[0].(keyvault.CertificateOperation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCertificateOperation indicates an expected call of GetCertificateOperation.
func (mr *MockBaseClientMockRecorder) GetCertificateOperation(ctx, vaultBaseURL, certificateName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCertificateOperation", reflect.TypeOf((*MockBaseClient)(nil).GetCertificateOperation), ctx, vaultBaseURL, certificateName)
}

// GetCertificates mocks base method.
func (m *MockBaseClient) GetCertificates(ctx context.Context, vaultBaseURL string, maxresults *int32, includePending *bool) (keyvault.CertificateListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCertificates", ctx, vaultBaseURL, maxresults, includePending)
	ret0, _ := ret[0].(keyvault.CertificateListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCertificates indicates an expected call of GetCertificates.
func (mr *MockBaseClientMockRecorder) GetCertificates(ctx, vaultBaseURL, maxresults, includePending any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCertificates", reflect.TypeOf((*MockBaseClient)(nil).GetCertificates), ctx, vaultBaseURL, maxresults, includePending)
}

// GetSecret mocks base method.
func (m *MockBaseClient) GetSecret(ctx context.Context, vaultBaseURL, secretName, secretVersion string) (keyvault.SecretBundle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecret", ctx, vaultBaseURL, secretName, secretVersion)
	ret0, _ := ret[0].(keyvault.SecretBundle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecret indicates an expected call of GetSecret.
func (mr *MockBaseClientMockRecorder) GetSecret(ctx, vaultBaseURL, secretName, secretVersion any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecret", reflect.TypeOf((*MockBaseClient)(nil).GetSecret), ctx, vaultBaseURL, secretName, secretVersion)
}

// GetSecretVersions mocks base method.
func (m *MockBaseClient) GetSecretVersions(ctx context.Context, vaultBaseURL, secretName string, maxresults *int32) ([]keyvault.SecretItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecretVersions", ctx, vaultBaseURL, secretName, maxresults)
	ret0, _ := ret[0].([]keyvault.SecretItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecretVersions indicates an expected call of GetSecretVersions.
func (mr *MockBaseClientMockRecorder) GetSecretVersions(ctx, vaultBaseURL, secretName, maxresults any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecretVersions", reflect.TypeOf((*MockBaseClient)(nil).GetSecretVersions), ctx, vaultBaseURL, secretName, maxresults)
}

// GetSecrets mocks base method.
func (m *MockBaseClient) GetSecrets(ctx context.Context, vaultBaseURL string, maxresults *int32) ([]keyvault.SecretItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecrets", ctx, vaultBaseURL, maxresults)
	ret0, _ := ret[0].([]keyvault.SecretItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecrets indicates an expected call of GetSecrets.
func (mr *MockBaseClientMockRecorder) GetSecrets(ctx, vaultBaseURL, maxresults any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecrets", reflect.TypeOf((*MockBaseClient)(nil).GetSecrets), ctx, vaultBaseURL, maxresults)
}

// SetCertificateIssuer mocks base method.
func (m *MockBaseClient) SetCertificateIssuer(ctx context.Context, vaultBaseURL, issuerName string, parameter keyvault.CertificateIssuerSetParameters) (keyvault.IssuerBundle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCertificateIssuer", ctx, vaultBaseURL, issuerName, parameter)
	ret0, _ := ret[0].(keyvault.IssuerBundle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetCertificateIssuer indicates an expected call of SetCertificateIssuer.
func (mr *MockBaseClientMockRecorder) SetCertificateIssuer(ctx, vaultBaseURL, issuerName, parameter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCertificateIssuer", reflect.TypeOf((*MockBaseClient)(nil).SetCertificateIssuer), ctx, vaultBaseURL, issuerName, parameter)
}

// SetSecret mocks base method.
func (m *MockBaseClient) SetSecret(ctx context.Context, vaultBaseURL, secretName string, parameters keyvault.SecretSetParameters) (keyvault.SecretBundle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSecret", ctx, vaultBaseURL, secretName, parameters)
	ret0, _ := ret[0].(keyvault.SecretBundle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetSecret indicates an expected call of SetSecret.
func (mr *MockBaseClientMockRecorder) SetSecret(ctx, vaultBaseURL, secretName, parameters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSecret", reflect.TypeOf((*MockBaseClient)(nil).SetSecret), ctx, vaultBaseURL, secretName, parameters)
}
