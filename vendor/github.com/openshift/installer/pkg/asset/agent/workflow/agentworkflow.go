package workflow

import (
	"context"
	"fmt"
	"os"

	"github.com/openshift/installer/pkg/asset"
)

// AgentWorkflow allows other assets to check
// which is the workflow currently active.
type AgentWorkflow struct {
	File     *asset.File
	Workflow AgentWorkflowType
}

var _ asset.WritableAsset = (*AgentWorkflow)(nil)

// Name returns a human friendly name for the asset.
func (*AgentWorkflow) Name() string {
	return "Agent Workflow"
}

// Dependencies returns all of the dependencies directly needed to generate
// the asset.
func (*AgentWorkflow) Dependencies() []asset.Asset {
	return []asset.Asset{}
}

// Generate generates the AgentWorkflow asset.
func (a *AgentWorkflow) Generate(_ context.Context, dependencies asset.Parents) error {
	// Set install workflow as a default
	a.Workflow = AgentWorkflowTypeInstall
	a.File = &asset.File{
		Filename: agentWorkflowFilename,
		Data:     []byte(a.Workflow),
	}

	return nil
}

// Files returns the files generated by the asset.
func (a *AgentWorkflow) Files() []*asset.File {
	if a.File != nil {
		return []*asset.File{a.File}
	}
	return []*asset.File{}
}

// Load returns the asset from disk.
func (a *AgentWorkflow) Load(f asset.FileFetcher) (bool, error) {
	file, err := f.FetchByName(agentWorkflowFilename)
	if err != nil {
		if os.IsNotExist(err) {
			return false, nil
		}
		return false, fmt.Errorf("failed to load %s file: %w", agentWorkflowFilename, err)
	}

	// Get the current workflow
	a.Workflow = AgentWorkflowType(file.Data)
	a.File = file

	return true, nil
}
